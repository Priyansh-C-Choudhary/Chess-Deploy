name: Manage EKS Cluster

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - closed

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'latest'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Provision resources
        run: |
          echo "Provisioning resources..."
          kubectl apply -f deployment.yaml --validate=false
          kubectl apply -f service.yaml --validate=false
          kubectl apply -f hpa.yaml --validate=false
          kubectl apply -f policy.yaml --validate=false
        env:
          AWS_DEFAULT_REGION: ap-south-1
          AWS_REGION: ap-south-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Wait for external IP
        run: |
          echo "Waiting for external IP..."
          sleep 240  # Adjust sleep time as needed
        timeout-minutes: 5

      - name: Get external IP
        run: |
          kubectl get svc -o=jsonpath='{.items[0].status.loadBalancer.ingress[0].ip}'
        id: get_ip

      - name: Access application
        run: |
          echo "Accessing application at http://${{ steps.get_ip.outputs.stdout }}/"

  destroy:
    runs-on: ubuntu-latest

    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)

    steps:
      - name: Manual approval for destruction
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const response = await github.actions.createApprovalRequest({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              event: 'APPROVE',
              body: 'Approve destruction of resources'
            });
            console.log(response.data);
            echo "Destruction of resources approved, proceeding..."

      - name: Set up kubectl for destruction
        uses: azure/setup-kubectl@v1
        with:
          version: 'latest'

      - name: Destroy resources
        run: |
          kubectl delete -f deployment.yaml --validate=false
          kubectl delete -f service.yaml --validate=false
          kubectl delete -f hpa.yaml --validate=false
          kubectl delete -f policy.yaml --validate=false
