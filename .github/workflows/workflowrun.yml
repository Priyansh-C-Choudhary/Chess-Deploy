name: Workflow

on:
  workflow_dispatch:

jobs:
  sonarcloud:
    name: SonarCloud and Quality Gate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: Quality Gate Check
        id: quality_gate
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  Build-and-Push-Docker-Image:
    runs-on: ubuntu-latest
    needs: [sonarcloud]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Build and push Docker image to ECR
      run: |
        docker build -t chesswebapp .
        aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 241367251936.dkr.ecr.ap-south-1.amazonaws.com
        docker tag chesswebapp:latest 241367251936.dkr.ecr.ap-south-1.amazonaws.com/chesswebapp:latest
        docker push 241367251936.dkr.ecr.ap-south-1.amazonaws.com/chesswebapp:latest

  Provision-Networking:
    runs-on: ubuntu-latest
    needs: [Build-and-Push-Docker-Image]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Provision EKS Cluster
      run: |
        aws cloudformation deploy \
          --template-file eks-vpc-stack.yaml \
          --stack-name my-eks-vpc \
          --capabilities CAPABILITY_NAMED_IAM

    - name: Wait for stack creation
      run: |
        aws cloudformation wait stack-create-complete \
          --region ap-south-1 \
          --stack-name my-eks-vpc

  Provision-EKS:
      runs-on: ubuntu-latest
      needs: [Provision-Networking]
  
      steps:
      - name: Checkout code
        uses: actions/checkout@v2
  
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
  
      - name: Provision EKS Cluster
        run: |
          aws cloudformation create-stack \
            --region ap-south-1 \
            --stack-name my-eks-cluster \
            --capabilities CAPABILITY_NAMED_IAM \
            --template-body file://eks-stack.yaml

      - name: Wait for stack creation
        run: |
          aws cloudformation wait stack-create-complete \
            --region ap-south-1 \
            --stack-name my-eks-cluster

  Configure-Kubectl-and-Apply-Deployment:
    runs-on: ubuntu-latest
    needs: [Provision-EKS]
  
    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

      - name: Configure kubeconfig
        run: |
          aws eks --region ap-south-1 update-kubeconfig --name my-eks-cluster

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Apply Kubernetes Deployment
        run: |
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml
